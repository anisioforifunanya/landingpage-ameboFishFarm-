/*In CSS, the units **px**, **rem**, **%**, **fr**, and **vh** differ in how they 
measure and scale values:

1. **px (Pixels)**:  
   - A fixed, absolute unit.  
   - Represents a specific number of screen pixels, regardless of the viewport or font 
   size.  
   - Example: `width: 50px;` means 50 pixels wide.

2. **rem (Root Em)**:  
   - A scalable, relative unit.  
   - Relative to the root element's (`<html>`) font size.  
   - Example: If the root font size is `16px`, `1rem` equals `16px`.

3. **% (Percentage)**:  
   - A relative unit.  
   - Depends on the size of the parent element (for dimensions) or the context (e.g., 
   for font sizes).  
   - Example: `width: 50%;` makes the element 50% of its parentâ€™s width.

4. **fr (Fraction)**:  
   - Used in CSS Grid layouts to define proportional space within a grid container.  
   - Example: `1fr` is one fraction of the available free space, dividing it with other 
   `fr` units.  

5. **vh (Viewport Height)**:  
   - A relative unit based on the height of the viewport.  
   - `1vh` equals 1% of the viewport height.  
   - Example: `height: 50vh;` sets the element to half the screenâ€™s height.

---

### Key Differences:
- **px** is fixed, while **rem**, **%**, **fr**, and **vh** are relative to different 
contexts.  
- **rem** is scalable based on the root font size, ideal for responsive typography.  
- **%** adjusts based on the parent container, useful for fluid layouts.  
- **fr** divides space in grids, while **vh** relates to the viewport size.  

Would you like examples or use cases? ðŸ˜Š*/

/*Here are **examples and use cases** for each CSS unit: **px**, **rem**, **%**, **fr**, 
and **vh**.

---

### **1. px (Pixels)**
#### **Example**:  
```css
.box {
  width: 200px;
  height: 100px;
  background-color: lightblue;
}
```
#### **Use Case**:  
- When you need a fixed, unchanging size, regardless of screen size or font scaling 
(e.g., icons, borders).
- **Best for:** Precise layouts in non-responsive designs.

---

### **2. rem (Root Em)**  
#### **Example**:  
```css
html {
  font-size: 16px; /* 1rem = 16px */
}

.box {
  width: 10rem; /* 10 Ã— 16px = 160px */
  font-size: 2rem; /* 2 Ã— 16px = 32px */
  background-color: lightgreen;
}
```
#### **Use Case**:  
- For scalable, consistent spacing and font sizes in responsive designs.
- Changes dynamically if the root font size (`<html>`) is updated.
- **Best for:** Typography, padding, and margins in flexible layouts.

---

### **3. % (Percentage)**  
#### **Example**:  
```css
.parent {
  width: 80%; /* Parent is 80% of the viewport width */
  height: 300px;
  background-color: coral;
}

.child {
  width: 50%; /* Child is 50% of the parent's width */
  height: 100px;
  background-color: yellow;
}
```
#### **Use Case**:  
- For fluid, proportional layouts that adapt to parent element sizes.
- Useful in responsive designs for setting widths, heights, or margins.
- **Best for:** Flexible grids, containers, and scaling within parent elements.

---

### **4. fr (Fractional Unit in CSS Grid)**  
#### **Example**:  
```css
.grid-container {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr; /* Divides space into 4 parts */
  gap: 10px;
}

.item {
  background-color: lightcoral;
}
```
- **1fr**: Occupies 1 fraction of the space.  
- **2fr**: Occupies 2 fractions of the space (twice as wide as 1fr).  

#### **Use Case**:  
- When dividing grid space proportionally, regardless of specific sizes.
- **Best for:** Responsive grid layouts and proportional spacing without calculating percentages or fixed widths.

---

### **5. vh (Viewport Height)**  
#### **Example**:  
```css
.fullscreen-box {
  width: 100%;
  height: 50vh; /* 50% of the viewport height */
  background-color: lightseagreen;
}
```
#### **Use Case**:  
- For layouts that depend on the size of the viewport, such as fullscreen sections or hero banners.
- **Best for:** Ensuring elements scale with the browser window.

---

---

### **Comparison of Units in Context**

#### **Example Layout**
```html
<div class="container">
  <div class="box1">px</div>
  <div class="box2">rem</div>
  <div class="box3">%</div>
  <div class="box4">fr</div>
  <div class="box5">vh</div>
</div>
```

#### **CSS**
```css
.container {
  display: grid;
  grid-template-columns: 1fr 1fr; /* Using fr for grid */
  gap: 10px;
  height: 100vh; /* Takes full viewport height */
}

.box1 {
  width: 200px; /* Fixed size */
  height: 100px;
  background: lightblue;
}

.box2 {
  width: 10rem; /* Scalable with root font size */
  height: 5rem;
  background: lightgreen;
}

.box3 {
  width: 50%; /* Relative to the container */
  height: 50%;
  background: coral;
}

.box4 {
  background: yellow;
  height: auto; /* Adjusts to content */
}

.box5 {
  width: 100%;
  height: 50vh; /* Half of the viewport height */
  background: lightgray;
}
```

### **Rendered Output**:
- **px**: The size is always 200px by 100px.  
- **rem**: Scales if the root font size changes (e.g., switching `html { font-size: 20px }`).  
- **%**: Adapts to the parent containerâ€™s dimensions.  
- **fr**: Automatically divides space evenly within the grid.  
- **vh**: Changes dynamically as the viewport height changes.

---

### Summary Table of When to Use:
| **Unit**  | **Use When...**                                                                 |
|-----------|---------------------------------------------------------------------------------|
| **px**    | You need fixed, precise dimensions unaffected by parent or viewport size.       |
| **rem**   | You want scalable designs that respond to root font size changes.               |
| **%**     | You need dimensions relative to a parent element for fluid layouts.             |
| **fr**    | You're building proportional grid-based layouts with no fixed dimensions.       |
| **vh**    | You want dimensions tied to the viewport, like fullscreen sections or banners.  |

Let me know if you'd like further clarifications! ðŸ˜Š*/